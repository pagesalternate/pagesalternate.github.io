var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var CircleProgressBar = function () {
	function CircleProgressBar(selector, options) {
		_classCallCheck(this, CircleProgressBar);

		this.domNode = document.querySelector(selector);
		if (this.domNode === null) return;
		this.initialDashOffset = 301.635;
		this.timeout;
		this.progress = 0;
		if (this.domNode.querySelector(".wc-loader-svg") === null) {
			this.domNode.insertAdjacentHTML( 'beforeend', this.createSvgFromTemplate(options, this.initialDashOffset) );
		}
	}

	_createClass(CircleProgressBar, [{
		key: 'createSvgFromTemplate',
		value: function createSvgFromTemplate(options, initialDashOffset) {
			var strokeWidth = options.strokeWidth ? options.strokeWidth : 4;
			var trailWidth = options.trailWidth ? options.trailWidth : 2;
			var strokeColor = options.strokeColor ? options.strokeColor : '#2179d3';
			var trailColor = options.trailColor ? options.trailColor : '#fff';
			var fill = options.fill ? options.fill : 'rgba(0, 0, 0, 0.5)';
			return '<svg class="wc-loader-svg" viewBox="0 0 100 100" aria-hidden="true">\n    <path d="M 50,50 m 0,-48 a 48,48 0 1 1 0,96 a 48,48 0 1 1 0,-96" stroke="' + trailColor + '" stroke-width="' + trailWidth + '" fill-opacity="0"></path>\n    <path d="M 50,50 m 0,-48 a 48,48 0 1 1 0,96 a 48,48 0 1 1 0,-96" stroke="' + strokeColor + '" stroke-width="' + strokeWidth + '" fill="' + fill + '" style="stroke-dasharray: 301.635, 301.635; stroke-dashoffset: 301.635;"></path>\n    </svg>';
		}
	}, {
		key: 'animateStep',
		value: function animateStep(progress, callback) {
			progress = progress || 0;
			if (progress < 0) progress = 0;
			if (progress > 1) progress = 1;
			this._updatePathStep(progress);
			if (callback) callback();
		}
	}, {
		key: 'animateFull',
		value: function animateFull(time, callback) {
			time = time - 200;
			var steps = time / 1000 * 5;
			var percent = steps * 100 / time / 100;
			var timeCount = 0;
			this._callTimeout(time, steps, timeCount, percent, callback);
			window.d = new Date().getTime();
		}
	}, {
		key: 'clearAnimation',
		value: function clearAnimation() {
			clearTimeout(this.timeout);
			this._updatePathStep(0);
		}
	}, {
		key: 'destroy',
		value: function destroy() {
			clearTimeout(this.timeout);
			var elem = this.domNode.querySelector(".wc-loader-svg");
			if (elem !== null) {
				this.domNode.removeChild(elem);
			}
		}

		// Inner Funcs

	}, {
		key: '_easeOutQuint',
		value: function _easeOutQuint(t) {
			return t < .5 ? 4 * t * t * t : (t - 1) * (2 * t - 2) * (2 * t - 2) + 1;
		}
	}, {
		key: '_updatePathStep',
		value: function _updatePathStep(progress) {
			this.progress = progress;
			var currDashOffset = this.initialDashOffset - this.initialDashOffset * progress;
			this.domNode.querySelectorAll("path")[1].style.strokeDashoffset = currDashOffset;
		}
	}, {
		key: '_callTimeout',
		value: function _callTimeout(time, steps, timeCount, percent, callback) {
			var thisStep = timeCount === 0 ? 0 : steps;
			this.timeout = setTimeout(function () {
				if (timeCount >= time) {
					if (callback) callback();
					return;
				}
				this.animateStep(this._easeOutQuint(timeCount / time));
				timeCount += steps;
				this._callTimeout(time, steps, timeCount, percent, callback);
			}.bind(this), thisStep);
		}
	}]);

	return CircleProgressBar;
}();